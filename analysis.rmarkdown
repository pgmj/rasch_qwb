---
title: "Questionnaire on Well-Being
(QWB)"
subtitle: "Rasch analysis"
title-block-banner: "#009ca6"
title-block-banner-color: "#FFFFFF"
author: 
  name: Magnus Johansson
  affiliation: RISE Research Institutes of Sweden
  affiliation-url: https://www.ri.se/en/kbm
  orcid: 0000-0003-1669-592X
date: last-modified
date-format: iso
always_allow_html: true
format: 
  html:
    toc: true
    toc-depth: 3
    toc-title: "Table of contents"
    embed-resources: true
    standalone: true
    page-layout: full
    mainfont: 'Lato'
    monofont: 'Roboto Mono'
    code-overflow: wrap
    code-fold: true
    code-tools: true
    code-link: true
    number-sections: true
    fig-dpi: 96
    layout-align: left
    linestretch: 1.6
    theme:
      - materia
      - custom.scss
    css: styles.css
    license: CC BY
  pdf:
    papersize: a4
    documentclass: report 
execute:
  echo: true
  warning: false
  message: false
  cache: false
editor_options: 
  markdown: 
    wrap: 72
  chunk_output_type: console
---

```{r}
#| label: setup

# one package below requires that you use devtools to install them manually:
# first install devtools by
# install.packages('devtools')

library(RISEkbmRasch) # devtools::install_github("pgmj/RISEkbmRasch")
library(grateful)
library(ggrepel)
library(car)
library(kableExtra)
library(readxl)
library(tidyverse)
library(eRm)
library(iarm)
library(mirt)
library(psych)
library(psychotree)
library(matrixStats)
library(reshape)
library(knitr)
library(patchwork)
library(formattable) 
library(glue)

library(readxl)

### optional libraries
#library(TAM)
#library(skimr)
#library(janitor)

### some commands exist in multiple packages, here we define preferred ones that are frequently used
select <- dplyr::select
count <- dplyr::count
recode <- car::recode
rename <- dplyr::rename
```



Questionnaire on Well-Being
(QWB), 18 items, each item is scored on a scale of 0
to 4 [@hlynsson_evaluating_2024]. Data from the same paper. We'll use the data from the second study that was used in the CFA in the paper.




```{r}
### import data - this is just sample code, the files do not exist
#d1 <- read_excel("data/study_one.xlsx") # replace with your datafile as needed

### Load item information
# make sure that variable names in df match with itemlabels$itemnr
itemlabels <- data.frame(stringsAsFactors = FALSE,
           itemnr = paste0("q",1:18),
  item = c(
                                                      "... felt calm and relaxed?",
                                                      "... had a good appetite and enjoyed eating?",
                                                      "... have been able to take initiatives and get started with what you wanted to do?",
                                                      "... felt optimistic and viewed things on the bright side?",
                                                      "... felt active and filled with energy?",
                                                      "... felt a strong zest for life?",
                                                      "... been able to object and to assert yourself when this is needed?",
                                                      "... felt satisfied with your life in its present situation?",
                                                      "... felt that your life is meaningful?",
                                                      "... slept well and got the right amount of sleep?",
                                                      "... have been able to be focused and concentrated on today’s tasks?",
                                                      "... felt interested in various activities and in people around you?",
                                                      "... felt happy and harmonious?",
                                                      "... felt satisfied with yourself?",
                                                      "... been able to made decisions and carry them out?",
                                                      "... been able to stay in the here and now and to let go of thoughts about problems?",
                                                      "... had the power to recover one’s strength if something has been stressful or difficult?",
                                                      "... felt that you are well and healthy?")
)

```

```{r}
dd <- read_excel("data/study_two.xlsx")
# swb items extract
df <- dd %>% 
  select(starts_with("swb")) %>% 
  select(!contains("sum")) %>% 
  set_names(itemlabels$itemnr)
```

```{r}
RImissing(df)
RImissingP(df,n = 50)
nrow(df)
df %>% 
  na.omit() %>% 
  nrow()
```



  
Lots of completely missing, we'll move ahead with only complete responses.




```{r}
df <- na.omit(df)
```




No demographic variables available in data.

## All items in the analysis



```{r}
RIlistitems(df)
```




## Descriptives of raw data

Response distribution for all items are summarized below.




```{r}
#| tbl-cap: "Total number of responses for all items"
RIallresp(df)
```




### Descriptives - item level




```{r}
#| column: margin
RIlistItemsMargin(df, fontsize = 12)
```




::: panel-tabset
#### Tile plot



```{r}
RItileplot(df)
```



#### Stacked bars



```{r}
RIbarstack(df)
```



#### Barplots



```{r}
#| layout-ncol: 2
RIbarplot(df)
```



:::

## Rasch analysis 1

The eRm package, which uses Conditional Maximum Likelihood (CML)
estimation, will be used primarily. For this analysis of polytomous data, the Partial
Credit Model will be used.




```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(df, fontsize = 13)
```




::: panel-tabset
### Conditional item fit

Ideally, we would use simulation based cutoff values for item fit. Since this is a complex model that takes a long time to estimate, we'll hold off with the simulations and just have a look at the conditional item fit. Old, rule-of-thumb cutoffs would say that 0.7-1.3 could be useful.




```{r}
RIitemfit(df)
#simfit1 <- RIgetfit(df, iterations = 500, cpu = 8) 

#RIitemfit(df, simfit1)
#RIgetfitPlot(simfit1, df)

#boot_fit(PCM(df), B = 50)
```




### CICC



```{r}
ICCplot(as.data.frame(df), 
        itemnumber = c(2,3,13,18), 
        method = "cut", 
        itemdescrip = c("item 2","item 3","item 13","item 18"))

### also suggested:
# library(RASCHplot) # install first with `devtools::install_github("ERRTG/RASCHplot")`
# CICCplot(PCM(df),
#          which.item = c(1:4),
#          lower.groups = c(0,7,14,21,28,35),
#          grid.items = TRUE)
```



### Item-restscore



```{r}
item_restscore(PCM(df))
```



### PCA



```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(df)
```



### Residual correlations

Similarly to item fit, we want to use a simulation based cutoff value, but this first look we'll settle with the rule-of-thumb of 0.2 above the average correlation of all item pairs.



```{r}
#simcor1 <- RIgetResidCor(df, iterations = 500, cpu = 8)
RIresidcorr(df, cutoff = 0.2)
```



### 1st contrast loadings



```{r}
RIloadLoc(df)
```



### Many items ICC



```{r}
mirt(df, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```




### Targeting



```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(df)
```



### Item hierarchy



```{r}
#| fig-height: 5
RIitemHierarchy(df)
```



### Score groups



```{r}
iarm::score_groups(as.data.frame(df)) %>% 
  as.data.frame(nm = "score_group") %>% 
  dplyr::count(score_group)

dif_plots <- df %>% 
  add_column(dif = iarm::score_groups(.)) %>% 
  split(.$dif) %>% # split the data using the DIF variable
  map(~ RItileplot(.x %>% dplyr::select(!dif)) + labs(title = .x$dif))
dif_plots[[1]] + dif_plots[[2]]
```



:::

At least 4 items with high item fit, q2, 3, 13, and 18. Many more are indicate by item-restscore.

- q2 ... felt calm and relaxed?
- q3 ... had a good appetite and enjoyed eating?
- q13 ... felt happy and harmonious?
- q18 ... felt that you are well and healthy?

11 potential residual correlations. PCA of residuals indicates at least two dimensions in data. Items 2 and 3 deviate in the plot of loadings on the first residual constrast.

Most strongly correlated item pairs are:
- 7 and 8 
  7: been able to object and to assert yourself when this is needed?
  8: felt satisfied with your life in its present situation?
- 4 and 5
  4: felt optimistic and viewed things on the bright side?
  5: felt active and filled with energy?

Item category thresholds are generally well-functioning, no disordering of thresholds.

Score group analysis is not appropriate due to lots of cells missing responses entirely in the higher scoring group.

## Rasch analysis 2

Removing items 2 and 3.




```{r}
removed_items <- c("q2","q3")
df_backup <- df

df <- df_backup %>% 
  select(!all_of(removed_items))
```

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(df, fontsize = 13)
```




::: panel-tabset
### Conditional item fit

Ideally, we would use simulation based cutoff values for item fit. Since this is a complex model that takes a long time to estimate, we'll hold off with the simulations and just have a look at the conditional item fit. Old, rule-of-thumb cutoffs would say that 0.8-1.2 could be useful.




```{r}
RIitemfit(df)
#simfit1 <- RIgetfit(df, iterations = 500, cpu = 8) 

#RIitemfit(df, simfit1)
#RIgetfitPlot(simfit1, df)

#boot_fit(PCM(df), B = 50)
```




### CICC



```{r}
ICCplot(as.data.frame(df), 
        itemnumber = c(11,16), 
        method = "cut", 
        itemdescrip = c("item 13","item 18"))

### also suggested:
# library(RASCHplot) # install first with `devtools::install_github("ERRTG/RASCHplot")`
# CICCplot(PCM(df),
#          which.item = c(1:4),
#          lower.groups = c(0,7,14,21,28,35),
#          grid.items = TRUE)
```



### Item-restscore



```{r}
item_restscore(PCM(df))
```



### PCA



```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(df)
```



### Residual correlations

Similarly to item fit, we want to use a simulation based cutoff value, but this first look we'll settle with the rule-of-thumb of 0.2 above the average correlation of all item pairs.



```{r}
#simcor1 <- RIgetResidCor(df, iterations = 500, cpu = 8)
RIresidcorr(df, cutoff = 0.2)
```



### 1st contrast loadings



```{r}
RIloadLoc(df)
```



### Many items ICC



```{r}
mirt(df, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```




### Targeting



```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(df)
```



### Item hierarchy



```{r}
#| fig-height: 5
RIitemHierarchy(df)
```



### Score groups



```{r}
iarm::score_groups(as.data.frame(df)) %>% 
  as.data.frame(nm = "score_group") %>% 
  dplyr::count(score_group)

dif_plots <- df %>% 
  add_column(dif = iarm::score_groups(.)) %>% 
  split(.$dif) %>% # split the data using the DIF variable
  map(~ RItileplot(.x %>% dplyr::select(!dif)) + labs(title = .x$dif))
dif_plots[[1]] + dif_plots[[2]]
```



:::

Items 13 and 18 still have high item fit. PCA still indicates issues, and the residual correlations remain. 

## Rasch analysis 3

Removing items 13 and 18.




```{r}
removed_items <- c("q2","q3","q13","q18")

df <- df_backup %>% 
  select(!all_of(removed_items))
```

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(df, fontsize = 13)
```




::: panel-tabset
### Conditional item fit

Ideally, we would use simulation based cutoff values for item fit. Since this is a complex model that takes a long time to estimate, we'll hold off with the simulations and just have a look at the conditional item fit. Old, rule-of-thumb cutoffs would say that 0.8-1.2 could be useful.




```{r}
RIitemfit(df)
#simfit1 <- RIgetfit(df, iterations = 500, cpu = 8) 

#RIitemfit(df, simfit1)
#RIgetfitPlot(simfit1, df)

#boot_fit(PCM(df), B = 50)
```




### Item-restscore



```{r}
item_restscore(PCM(df))
```



### PCA



```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(df)
```



### Residual correlations

Similarly to item fit, we want to use a simulation based cutoff value, but this first look we'll settle with the rule-of-thumb of 0.2 above the average correlation of all item pairs.



```{r}
#simcor1 <- RIgetResidCor(df, iterations = 500, cpu = 8)
RIresidcorr(df, cutoff = 0.2)
```



### 1st contrast loadings



```{r}
RIloadLoc(df)
```



### Many items ICC



```{r}
mirt(df, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```




### Targeting



```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(df)
```



### Item hierarchy



```{r}
#| fig-height: 5
RIitemHierarchy(df)
```



### Score groups



```{r}
iarm::score_groups(as.data.frame(df)) %>% 
  as.data.frame(nm = "score_group") %>% 
  dplyr::count(score_group)

dif_plots <- df %>% 
  add_column(dif = iarm::score_groups(.)) %>% 
  split(.$dif) %>% # split the data using the DIF variable
  map(~ RItileplot(.x %>% dplyr::select(!dif)) + labs(title = .x$dif))
dif_plots[[1]] + dif_plots[[2]]
```



:::

Item 5 has correlations with 4 and 12, it will be removed. 

Items 7 and 8 have similar targeting properties, and item 7 has somewhat better item fit. We remove item 8.

## Rasch analysis 4

Removing items 5 and 8.




```{r}
removed_items <- c("q2","q3","q13","q18","q5","q8")

df <- df_backup %>% 
  select(!all_of(removed_items))
```

```{r}
#| column: margin
#| echo: false
RIlistItemsMargin(df, fontsize = 13)
```




::: panel-tabset
### Conditional item fit




```{r}
simfit1 <- RIgetfit(df, iterations = 500, cpu = 8) 

RIitemfit(df, simfit1, sort = "infit")
#RIgetfitPlot(simfit1, df)
#boot_fit(PCM(df), B = 50)
```




### Item-restscore



```{r}
item_restscore(PCM(df))
```



### PCA



```{r}
#| tbl-cap: "PCA of Rasch model residuals"
RIpcmPCA(df)
```



### Residual correlations




```{r}
simcor1 <- RIgetResidCor(df, iterations = 500, cpu = 8)
RIresidcorr(df, cutoff = simcor1$p99)
```



### 1st contrast loadings



```{r}
RIloadLoc(df)
```



### Many items ICC



```{r}
mirt(df, model=1, itemtype='Rasch', verbose = FALSE) %>% 
  plot(type="trace", as.table = TRUE, 
       theta_lim = c(-6,6))
```




### Targeting



```{r}
#| fig-height: 5
# increase fig-height above as needed, if you have many items
RItargeting(df)
```



### Item hierarchy



```{r}
#| fig-height: 5
RIitemHierarchy(df)
```



### Score groups



```{r}
iarm::score_groups(as.data.frame(df)) %>% 
  as.data.frame(nm = "score_group") %>% 
  dplyr::count(score_group)

dif_plots <- df %>% 
  add_column(dif = iarm::score_groups(.)) %>% 
  split(.$dif) %>% # split the data using the DIF variable
  map(~ RItileplot(.x %>% dplyr::select(!dif)) + labs(title = .x$dif))
dif_plots[[1]] + dif_plots[[2]]
```



:::



## Person fit

::: panel-tabset
### Infit & location



```{r}
RIpfit(df)
```



### U3poly



```{r}
library(PerFit)
pfit_u3poly <- U3poly(matrix = df, 
                      Ncat = 5, # make sure to input number of response categories, not thresholds
                      IRT.PModel = "PCM")
```



### Cutoff information



```{r}
cutoff(pfit_u3poly)
```



### Flagged respondents



```{r}
flagged.resp(pfit_u3poly) %>% 
  pluck("Scores") %>% 
  as.data.frame() %>% 
  arrange(desc(PFscores))
```



:::


## Test Information (Reliability)



```{r}
RItif(df)
```






## Item parameters



```{r}
RIitemparams(df)
# write to CSV file
RIitemparams(df, output = "file", filename = "itemParameters.csv")
```




## Transformation table




```{r}
RIscoreSE(df)
```




## Ordinal/interval figure




```{r}
RIscoreSE(df, output = "figure")
```




## Software used



```{r}
pkgs <- cite_packages(cite.tidyverse = TRUE, 
                      output = "table",
                      bib.file = "grateful-refs.bib",
                      include.RStudio = TRUE,
                      out.dir = getwd())
formattable(pkgs, 
            table.attr = 'class=\"table table-striped\" style="font-size: 15px; font-family: Lato; width: 80%"')

```




## References

